name: Test Multi-Platform Build

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'vaitp_auditor/**'
      - 'deployment/**'
      - '.github/workflows/test-build.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'vaitp_auditor/**'
      - 'deployment/**'
      - '.github/workflows/test-build.yml'
  workflow_dispatch:
    inputs:
      create_packages:
        description: 'Create distribution packages'
        required: false
        default: 'false'
        type: boolean

jobs:
  test-build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[gui,dev]
        pip install pyinstaller
        
    - name: Check build dependencies
      run: python deployment/build_executable.py --check-deps
      
    - name: Check UPX availability
      run: python deployment/build_executable.py --check-upx
      
    - name: Check code signing tools
      run: python deployment/build_executable.py --check-signing
      
    - name: Create Windows manifest
      run: python -c "
        import sys
        sys.path.append('deployment')
        from build_executable import create_windows_manifest
        create_windows_manifest()
        "
      
    - name: Build Windows executable
      run: python deployment/build_executable.py --clean
      
    - name: Test executable exists
      run: |
        if (Test-Path "dist/VAITP-Auditor-GUI.exe") {
          Write-Host "✓ Windows executable created successfully"
          $size = (Get-Item "dist/VAITP-Auditor-GUI.exe").Length / 1MB
          Write-Host "Executable size: $([math]::Round($size, 2)) MB"
        } else {
          Write-Host "❌ Windows executable not found"
          exit 1
        }
      
    - name: Run executable tests
      run: |
        python deployment/test_executable.py --executable dist/VAITP-Auditor-GUI.exe --output windows-test-results.json
        
    - name: Run performance benchmarks
      run: |
        python deployment/benchmark_executable.py --executable dist/VAITP-Auditor-GUI.exe --output windows-benchmark.json --iterations 5 --duration 5
      
    - name: Test code signing (with test certificate)
      if: secrets.TEST_WINDOWS_CERT_BASE64 != ''
      run: |
        echo "${{ secrets.TEST_WINDOWS_CERT_BASE64 }}" | base64 -d > test_cert.p12
        python deployment/build_executable.py --sign --cert-path test_cert.p12 --cert-password "${{ secrets.TEST_WINDOWS_CERT_PASSWORD }}"
        Write-Host "✓ Code signing test completed"
      
    - name: Create Windows package
      if: github.event.inputs.create_packages == 'true'
      run: python deployment/build_executable.py --package
      
    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v3
      with:
        name: windows-executable
        path: |
          dist/VAITP-Auditor-GUI.exe
          VAITP-Auditor-GUI-Windows-*.zip
          windows-test-results.json
          windows-benchmark.json
        retention-days: 7

  test-build-macos:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[gui,dev]
        pip install pyinstaller
        
    - name: Check build dependencies
      run: python deployment/build_executable.py --check-deps
      
    - name: Check code signing tools
      run: python deployment/build_executable.py --check-signing
      
    - name: Install create-dmg (optional)
      run: |
        brew install create-dmg || echo "create-dmg installation failed, will use simple DMG creation"
        
    - name: Create macOS Info.plist
      run: python -c "
        import sys
        sys.path.append('deployment')
        from build_executable import create_macos_info_plist
        create_macos_info_plist()
        "
      
    - name: Build macOS executable
      run: python deployment/build_executable.py --clean
      
    - name: Test app bundle exists
      run: |
        if [ -d "dist/VAITP-Auditor-GUI.app" ]; then
          echo "✓ macOS app bundle created successfully"
          size=$(du -sm "dist/VAITP-Auditor-GUI.app" | cut -f1)
          echo "App bundle size: ${size} MB"
          
          # Check app bundle structure
          echo "App bundle contents:"
          find "dist/VAITP-Auditor-GUI.app" -type f | head -10
        else
          echo "❌ macOS app bundle not found"
          exit 1
        fi
      
    - name: Test app bundle executable
      run: |
        if [ -x "dist/VAITP-Auditor-GUI.app/Contents/MacOS/VAITP-Auditor-GUI" ]; then
          echo "✓ App bundle executable is present and executable"
        else
          echo "❌ App bundle executable not found or not executable"
          exit 1
        fi
        
    - name: Run executable tests
      run: |
        python deployment/test_executable.py --executable dist/VAITP-Auditor-GUI.app --output macos-test-results.json
        
    - name: Run performance benchmarks
      run: |
        python deployment/benchmark_executable.py --executable dist/VAITP-Auditor-GUI.app --output macos-benchmark.json --iterations 5 --duration 5
      
    - name: Test code signing (with test certificate)
      if: secrets.TEST_MACOS_CERT_BASE64 != ''
      run: |
        echo "${{ secrets.TEST_MACOS_CERT_BASE64 }}" | base64 -d > test_cert.p12
        security create-keychain -p temp_password build.keychain
        security import test_cert.p12 -k build.keychain -P "${{ secrets.TEST_MACOS_CERT_PASSWORD }}" -T /usr/bin/codesign
        security list-keychains -s build.keychain
        security unlock-keychain -p temp_password build.keychain
        python deployment/build_executable.py --sign --identity "${{ secrets.TEST_MACOS_IDENTITY }}"
        echo "✓ Code signing test completed"
      
    - name: Test DMG creation
      run: |
        python deployment/build_executable.py --create-dmg
        if [ -f "*.dmg" ]; then
          echo "✓ DMG creation test successful"
        else
          echo "⚠️  DMG creation test failed (non-blocking)"
        fi
      
    - name: Create macOS package
      if: github.event.inputs.create_packages == 'true'
      run: python deployment/build_executable.py --package
      
    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v3
      with:
        name: macos-executable
        path: |
          dist/VAITP-Auditor-GUI.app/**
          VAITP-Auditor-GUI-macOS-*.zip
          *.dmg
          macos-test-results.json
          macos-benchmark.json
        retention-days: 7

  test-build-linux:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgtk-3-dev \
          libglib2.0-dev \
          libcairo2-dev \
          libpango1.0-dev \
          libgdk-pixbuf2.0-dev \
          libatk1.0-dev
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[gui,dev]
        pip install pyinstaller
        
    - name: Check build dependencies
      run: python deployment/build_executable.py --check-deps
      
    - name: Install UPX (optional)
      run: |
        sudo apt-get install -y upx-ucl || echo "UPX not available, continuing without compression"
        
    - name: Check UPX availability
      run: python deployment/build_executable.py --check-upx
      
    - name: Create Linux desktop file
      run: python -c "
        import sys
        sys.path.append('deployment')
        from build_executable import create_linux_desktop_file
        create_linux_desktop_file()
        "
      
    - name: Build Linux executable
      run: python deployment/build_executable.py --clean
      
    - name: Test executable exists
      run: |
        if [ -f "dist/VAITP-Auditor-GUI" ]; then
          echo "✓ Linux executable created successfully"
          size=$(du -sm "dist/VAITP-Auditor-GUI" | cut -f1)
          echo "Executable size: ${size} MB"
          
          # Check if executable is actually executable
          if [ -x "dist/VAITP-Auditor-GUI" ]; then
            echo "✓ Executable has correct permissions"
          else
            echo "❌ Executable does not have execute permissions"
            exit 1
          fi
        else
          echo "❌ Linux executable not found"
          exit 1
        fi
      
    - name: Test executable dependencies
      run: |
        echo "Checking executable dependencies:"
        ldd dist/VAITP-Auditor-GUI | head -10 || echo "Static executable or ldd not applicable"
        
    - name: Run executable tests
      run: |
        python deployment/test_executable.py --executable dist/VAITP-Auditor-GUI --output linux-test-results.json
        
    - name: Run performance benchmarks
      run: |
        python deployment/benchmark_executable.py --executable dist/VAITP-Auditor-GUI --output linux-benchmark.json --iterations 5 --duration 5
        
    - name: Create Linux package
      if: github.event.inputs.create_packages == 'true'
      run: python deployment/build_executable.py --package
      
    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v3
      with:
        name: linux-executable
        path: |
          dist/VAITP-Auditor-GUI
          VAITP-Auditor-GUI-Linux-*.tar.gz
          deployment/vaitp-auditor-gui.desktop
          linux-test-results.json
          linux-benchmark.json
        retention-days: 7

  build-summary:
    needs: [test-build-windows, test-build-macos, test-build-linux]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Build Summary
      run: |
        echo "## Multi-Platform Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.test-build-windows.result }}" == "success" ]; then
          echo "✅ **Windows Build**: Success" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Windows Build**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.test-build-macos.result }}" == "success" ]; then
          echo "✅ **macOS Build**: Success" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **macOS Build**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.test-build-linux.result }}" == "success" ]; then
          echo "✅ **Linux Build**: Success" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Linux Build**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "- Download artifacts to test executables locally" >> $GITHUB_STEP_SUMMARY
        echo "- Run with \`create_packages: true\` to generate distribution packages" >> $GITHUB_STEP_SUMMARY
        echo "- Consider code signing for production releases" >> $GITHUB_STEP_SUMMARY
        
    - name: Download all artifacts (for package creation)
      if: github.event.inputs.create_packages == 'true'
      uses: actions/download-artifact@v3
      
    - name: List downloaded artifacts
      if: github.event.inputs.create_packages == 'true'
      run: |
        echo "Downloaded artifacts:"
        find . -name "*.exe" -o -name "*.app" -o -name "VAITP-Auditor-GUI" -o -name "*.zip" -o -name "*.tar.gz" | sort