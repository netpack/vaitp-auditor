name: Validate Workflow

on:
  push:
    branches:
      - main
      - develop
    paths:
      - '.github/workflows/**'
  pull_request:
    paths:
      - '.github/workflows/**'

jobs:
  validate:
    name: Validate GitHub Actions Workflow
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate workflow syntax
      run: |
        echo "Validating workflow files..."
        
        # Check if workflow files exist
        if [ ! -f ".github/workflows/build-and-release.yml" ]; then
          echo "❌ build-and-release.yml not found"
          exit 1
        fi
        
        if [ ! -f ".github/release-drafter.yml" ]; then
          echo "❌ release-drafter.yml not found"
          exit 1
        fi
        
        echo "✅ All workflow files found"
        
        # Basic YAML syntax validation using Python
        python3 -c "
import yaml
import sys

try:
    with open('.github/workflows/build-and-release.yml', 'r') as f:
        yaml.safe_load(f)
    print('✅ build-and-release.yml syntax is valid')
    
    with open('.github/release-drafter.yml', 'r') as f:
        yaml.safe_load(f)
    print('✅ release-drafter.yml syntax is valid')
    
except yaml.YAMLError as e:
    print(f'❌ YAML syntax error: {e}')
    sys.exit(1)
except Exception as e:
    print(f'❌ Error validating YAML: {e}')
    sys.exit(1)
"
        
    - name: Check required files exist
      run: |
        echo "Checking required project files..."
        
        required_files=(
          "setup.py"
          "deployment/build_executable.py"
          "deployment/pyinstaller_config.spec"
          "vaitp_auditor/gui/gui_app.py"
        )
        
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "❌ Required file missing: $file"
            exit 1
          else
            echo "✅ Found: $file"
          fi
        done
        
    - name: Validate Python syntax of build scripts
      run: |
        echo "Validating Python build scripts..."
        
        python3 -m py_compile deployment/build_executable.py
        echo "✅ build_executable.py syntax is valid"
        
        python3 -c "
import ast
with open('deployment/pyinstaller_config.spec', 'r') as f:
    content = f.read()
    try:
        ast.parse(content)
        print('✅ pyinstaller_config.spec syntax is valid')
    except SyntaxError as e:
        print(f'❌ Syntax error in spec file: {e}')
        exit(1)
"